Copies of MongoDB commands from the shell

Use ratingportal;
-Creates a new DB that can be used to store collections

db.restaurants.insertOne({
name: "Random Restaurant 2",
address: "411 W Commerce St, Dallas, Texas, 75208"
});
-db refers to the current database thats being used (ratingportal), .restaurants refers to the name of a collection within the database, .insertOne() is the method used to create a new data entry within the restaurants collection by creating a new object with all the necessary key-value pairs.
    -Note the similarity between the MongoDB query language and JSON

db.restaurants.find();
-Reads and returns all the data stored within the restaurants collection that match the query criteria

db.restaurants.find({name: "Random Restaurant 2"});
-The first parameter that .find() accepts is an object that can filter thru the restaurants collection entries

db.restaurants.find({}, {name: 1, _id: 0});
-The second parameter that .find() accepts is an object that can filter thru the key-value pairs that are returned for each entry in a collection

db.restaurants.findOne({name: "Random Restaurant 2"});
-.findOne() works similarly to .find() except it is used to return a singular matching obj in a collection, where .find() returns an arr of matching objs

db.restaurants.updateOne(
    {_id: ObjectId("640a379980b2be3323293f5b")},
    {$set: {
        name: "Random Restaurant 1",
        address: {
            street: "411 W Commerce",
            city: "Dallas",
            state: "Texas",
            zipCode: "75208"
        }
        }
    }
);
-updateOne() accesses a singular matching obj in a collection based on the first parameter (best practice uses the unique id that is autogenerated by MongoDB), then updates that obj based on the info passed to the $set obj that is the second parameter of the method

db.restaurants.updateOne(
    {_id: ObjectId("640a379980b2be3323293f5b")},
    {$set : {
        "address.street": "411 West Commerce St"
        }
    }
)
-"address.street" is an example of the syntax necessary to access key-values inside of nested objs

db.restaurants.deleteOne(
    {_id: ObjectId("640a379980b2be3323293f5b")}
)
-deleteOne() removes the first matching obj in a collection

db.types.insertOne({
    name: "Sushi"
});

db.types.insertMany([
    {name: "Jamaican"},
    {name: "Mexican"},
    {name: "Thai"}
]);

db.restaurants.insertOne({
    name: "Uchiba",
    address: {
        street: "2817 Maple Ave",
        city: "Dallas",
        state: "Texas",
        zipCode: "75201"
    },
    type: {
        typeId: ObjectId("640a4adbe24cf2325c95a457"),
        name: ObjectId("640a4adbe24cf2325c95a457").name
    }
});

db.restaurants.updateOne(
    {_id: ObjectId("640a509fe24cf2325c95a45e")},
    {$set: {
        "type.name": "Sushi"
        }}
    )

db.restaurants.updateOne(
    {_id: ObjectId("640a509fe24cf2325c95a45e")},
    {$set: {
            "type.typeId": "640a4adbe24cf2325c95a457"
        }}
    )

db.reviews.insertOne({
    reviewerName: "Ramaj Johnson",
    rating: 5,
    text: "Best Sushi in Dallas",
    date: new Date(),
    restaurant: {
        restaurantId: "640a509fe24cf2325c95a45e",
        name: "Uchiba"
    }
})

db.restaurants.updateOne(
    {_id: ObjectId("640a37f280b2be3323293f5c")},
    {$set: {
    "type.typeId": ObjectId("640a4db9e24cf2325c95a45a"),
    "type.name": "Jamaican"}})

db.reviews.find({rating: {$gte: 4}})
-With the use of this syntax we can add more complex filtering conditions to queries. These conditions must be passed as an obj

db.reviews.find({$and: [{rating: {$gt: 3}}, {rating: {$lte: 5}}] })